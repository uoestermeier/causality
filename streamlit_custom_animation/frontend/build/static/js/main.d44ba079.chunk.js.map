{"version":3,"sources":["utils.js","CustomAnimation.tsx","index.tsx"],"names":["polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","betweenPoints","x1","y1","x2","y2","dx","dy","describeMichotteArcs","radius1","startAngle1","endAngle1","radius2","startAngle2","endAngle2","start1","end1","largeArcFlag1","start2","end2","largeArcFlag2","between","d","join","gsap","registerPlugin","Draggable","InertiaPlugin","withStreamlitConnection","props","args","label","initialValue","useState","value","animated","useEffect","Streamlit","setFrameHeight","arc1","document","getElementById","arc2","setAttribute","set","transformOrigin","create","type","allowEventDefault","inertia","style","backgroundColor","width","viewBox","id","height","fill","rx","ry","className","cx","cy","r","stroke","stroke-width","mask","onClick","group","disc","to","scale","rotate","delay","duration","engine","Styletron","ReactDOM","render","StrictMode","theme","LightTheme"],"mappings":"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","file":"static/js/main.d44ba079.chunk.js","sourcesContent":["function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    let angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n    };\n}\n\nfunction betweenPoints(x1, y1, x2, y2, dx=0, dy=0) {\n    return {\n        x: (x1 + x2) / 2 + dx,\n        y: (y1 + y2) / 2 + dy\n    }\n}\n\nexport function describeMichotteArcs(x, y, radius1, startAngle1, endAngle1, radius2, startAngle2, endAngle2, dx=0, dy=0) {\n    let start1 = polarToCartesian(x, y, radius1, startAngle1);\n    let end1 = polarToCartesian(x, y, radius1, endAngle1);\n    let largeArcFlag1 = endAngle1 - startAngle1 <= 180 ? \"0\" : \"1\";\n\n    let start2 = polarToCartesian(x, y, radius2, startAngle2);\n    let end2 = polarToCartesian(x, y, radius2, endAngle2);\n    let largeArcFlag2 = endAngle2 - startAngle2 <= 180 ? \"0\" : \"1\";\n\n    let between = betweenPoints(end1.x, end1.y, start2.x, start2.y)\n    let d = [\n        \"M\", start1.x, start1.y,\n        \"A\", radius1, radius1, 0, largeArcFlag1, 1, end1.x, end1.y,\n        \"Q\", between.x + dx, between.y + dy, start2.x, start2.y,\n        \"A\", radius2, radius2, 0, largeArcFlag2, 1, end2.x, end2.y,\n    ].join(\" \");\n\n    return d;\n}\n\n","import React, { useEffect, useState } from \"react\"\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\nimport { describeMichotteArcs } from \"./utils.js\"\nimport gsap from \"gsap\"\nimport { Draggable } from \"gsap/Draggable\"\nimport { InertiaPlugin } from \"gsap/InertiaPlugin\"\n\ngsap.registerPlugin(Draggable, InertiaPlugin)\n\n/**\n * We can use a Typescript interface to destructure the arguments from Python\n * and validate the types of the input\n */\ninterface PythonArgs {\n  label: string\n  minValue?: number\n  maxValue?: number\n  initialValue: number[]\n}\n\n/**\n * No more props manipulation in the code.\n * We store props in state and pass value directly to underlying Slider\n * and then back to Streamlit.\n */\nconst CustomAnimation = (props: ComponentProps) => {\n  // Destructure using Typescript interface\n  // This ensures typing validation for received props from Python\n  const { label, initialValue }: PythonArgs = props.args\n  const [value] = useState(initialValue)\n  let animated = false\n  \n  function animate() {\n    let group = document.getElementById('group')\n    let disc = document.getElementById('disc')\n\n    if (animated) {\n        gsap.to(group, { scale: 1, y: \"+=290\" })\n    }\n    else {\n        gsap.to(group, { scale: 2, y: \"-=290\" })\n        gsap.to(disc, { rotate: 0 })\n        gsap.to(disc, { delay: 2, duration: 2, rotate: -180 })\n    }\n    animated = !animated;\n};\n\n\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n   \n    let arc1 = document.getElementById('arc1')\n    let arc2 = document.getElementById('arc2')\n    arc1!.setAttribute(\"d\", describeMichotteArcs(300, 300, 240, 220, 310, 190, 355, 120, -10, -20))\n    arc2!.setAttribute(\"d\", describeMichotteArcs(300, 300, 180, 220, 360, 150, 40, 120, 10, -20))\n\n    gsap.set('#disc', {transformOrigin: '50% 50%'})\n    gsap.set('#cover', {transformOrigin: '50% 100%'})\n    Draggable.create('#disc', {\n        type: \"rotation\",\n        allowEventDefault: true,\n        inertia: true\n    })\n  })\n\n  return (\n    <>\n      <div style={{backgroundColor: \"gray\"}}>\n      <h3>{label} {value}</h3>\n      <svg width=\"100%\"  viewBox=\"0 0 600 600\">\n        <g id=\"group\">\n            <mask id=\"myMask\">\n                <rect x=\"0\" y=\"150\" width=\"300\" height=\"300\" fill=\"white\" />\n                <rect x=\"50\" y=\"295\" width=\"200\" height=\"10\" fill=\"black\" rx=\"5\" ry=\"5\"/>\n            </mask>\n            <text x=\"40\" y=\"35\" fill=\"white\" className=\"heavy\">Click and drag circle to rotate, click black cover to animate</text>\n            <g id=\"disc\" >\n                <circle cx=\"300\" cy=\"300\" r=\"250\" fill=\"white\"/>\n                <path id=\"arc1\" stroke=\"red\" fill=\"white\" stroke-width=\"10\" />\n                <path id=\"arc2\" stroke=\"blue\" fill=\"white\" stroke-width=\"10\" />\n            </g>\n            <rect id=\"cover\" x=\"0\" y=\"150\" width=\"300\" height=\"300\" fill=\"black\"  mask=\"url(#myMask)\" onClick={animate}/>\n            <text x=\"70\" y=\"420\" fill=\"white\" className=\"heavy\">Michottes launch event</text>\n        </g>\n    </svg>\n    </div>\n   \n    </>\n  )\n}\n\nexport default withStreamlitConnection(CustomAnimation)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomAnimation from \"./CustomAnimation\"\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <CustomAnimation />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}